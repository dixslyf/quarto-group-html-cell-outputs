---
title: "`group-html-cell-outputs` (Quarto Extension)"
---

## About

The `group-html-cell-outputs` Quarto extension adds a filter to group the outputs of a cell
by wrapping them with a parent `div` when rendering to HTML.

## Motivation

When Quarto renders a code cell to HTML,
it creates separate `div` elements for the code block, standard output (`stdout`) and error output (`stderr`).
These output `div`s are rendered as direct siblings of the code block `div`.
For certain input formats (notably, Jupyter notebooks),
there can be multiple, interleaved `stdout` and `stderr` `div`s.

The rendering behaviour described above presents two main issues:

1. Each output `div` has its own independent styling.
   Hence, for long outputs, there may be multiple, separate scrollbars for
   individual output blocks.
   This looks awkward and makes the cell output hard to read.

1. Since outputs are fragmented across different sibling `div`s,
   it is difficult to treat them as a single unit.
   For example, you cannot easily scroll or collapse all cell outputs together.
   Furthermore, when you have an extremely long list of such `div`s,
   it becomes difficult to limit their max height and show a scrollbar
   without accidentally hiding part of the code block.

This filter resolves these issues by wrapping the outputs of a cell
with a parent `div` element.
By default, the parent `div` is given the `cell-output-container` class.

## Installation

To install the `group-html-cell-outputs` extension for a project,
run the following in your shell:

```sh
quarto add dixslyf/quarto-group-html-cell-outputs
```

See Quarto's documentation on [Managing Extensions](https://quarto.org/docs/extensions/managing.html)
for more information.

## Usage

In your `_quarto.yml` file or document's YAML header, add `group-html-cell-outputs` to `filters`:

```yaml
filters:
  - group-html-cell-outputs
```

When this filter is used with the default configuration,
all outputs of a cell are automatically wrapped in a shared parent `div`
with the `cell-output-container` class.
Some default styles are applied to `cell-output-container` to
adjust padding and prevent each child output element from having its own scrollbar
so that the output container looks like a single output block.

Here is an example with long outputs:

```{python}
import sys

for i in range(0, 3):
    print(f"Output stdout {i} " * 10)

for i in range(0, 3):
    print(f"Output stderr {i} " * 10, file=sys.stderr)
```

Without the filter, the standard and error outputs would have had their own scrollbars.
Now, they share a single scrollbar.

Additional styles can be applied by targeting `.cell-output-container` with CSS,
or by overriding the classes applied to the container `div`
(see `default-container-classes` in [_Document-Level Options_](#document-level-options)
and `output-container-classes` in [_Per-Cell Options_](#per-cell-options)).

## Configuration

### Document-Level Options

All document-level options are specified under the `group-html-cell-outputs` key.
The defaults are shown below with a description for each option:

```yaml
group-html-cell-outputs:
  # The class(es) to apply to the container divs.
  #
  # Multiple classes should be specified as a single string with
  # the classes delimited by spaces, the same way classes are
  # specified in HTML.
  - default-container-classes: "cell-output-container"

  # Whether to apply default styles for the `cell-output-container`.
  #
  # The default styles add padding and margins, show a scrollbar
  # for overflowing content and undo some of Quarto's default styles
  # for cell output `pre` and `code` elements so that the output
  # container looks a like a single block.
  - apply-default-styles: true

  # Whether to group cell outputs by default.
  #
  # Setting this to `true` makes the filter "opt-out"; i.e., all
  # cells have their outputs grouped â€” if you want to exclude a
  # cell's outputs from the filter, you need to specify
  # `group-outputs: false` in its per-cell options.
  #
  # Setting this to `false` makes the filter "opt-in"; i.e., cell
  # outputs are not grouped by default and you need to specify
  # `group-outputs: true` if you want to group a specific
  # cell's outputs.
  - group-by-default: true
```

### Per-Cell Options

To control whether the filter is applied to a specific cell,
use the `group-outputs` option.
For example, to disable the filter for a cell (when `group-by-default: true` is specified in the document-level options):

<!-- Unfortunately, seems like Quarto's `echo: fenced` is bugged and removes keys it doesn't know,
so we have to resort to this duplication. -->
````markdown
```{{python}}
#| group-outputs: false

import sys

for i in range(0, 3):
    print(f"Output stdout {i} " * 10)

for i in range(0, 3):
    print(f"Output stderr {i} " * 10, file=sys.stderr)
```
````
```{python}
#| echo: false
#| group-outputs: false

import sys

for i in range(0, 3):
    print(f"Output stdout {i} " * 10)

for i in range(0, 3):
    print(f"Output stderr {i} " * 10, file=sys.stderr)
```

You can also configure the classes applied to the output container with `output-container-classes`.
In the example below, we apply the `custom-output-container` class (defined in a separate CSS file and linked to this page),
which adds a border,
to the output container.

````markdown
```{{python}}
#| output-container-classes: "custom-output-container"

import sys

for i in range(0, 3):
    print(f"Output stdout {i} " * 10)

for i in range(0, 3):
    print(f"Output stderr {i} " * 10, file=sys.stderr)
```
````
```{python}
#| echo: false
#| output-container-classes: "custom-output-container"

import sys

for i in range(0, 3):
    print(f"Output stdout {i} " * 10)

for i in range(0, 3):
    print(f"Output stderr {i} " * 10, file=sys.stderr)
```

Note that `output-container-classes` overrides the default classes specified in the document-level `default-container-classes`.
Hence, the child output `div`s retain their original styling (most notably, the padding, margins and horizontal scrollbars)
that would otherwise have been adjusted by the default `cell-output-container` styling.
